#!/bin/bash

RED="\033[0;31m"
CYN="\033[0;36m"
GRN="\033[0;32m"
BLU="\033[0;34m"
RES="\033[0m"


# README  README  README  #########################################################
#
#	On Mac, must be installed brew Coreutils, for gtimeout
#
#	Each output goes into file "output", temporarily.
#	Sterr goes into file "output_erorr"
#
# 	Time must be >= 5 seconds, otherwise nothing is stored into file "output"
# 	Tester checks last 2 lines when program was interupted by timeout.
#	The last 2 lines must include "is" or "has", to be valid
#		(These last lines go into file "output_lastlines")
#
#	SET VARIABLES:
	TIME=2			# Set the runtime of each test, in seconds
	MEALS=5			# Max nr of meals (only for the last group of tests)
	CYCLES=1		# How many times to perform each group of tests 
#
#	Put this test folder into the philo folder, where the executable philo is.
#	Run: bash test_philos_jaka
#		(Try also running with fsanitize)
#
###################################################################################



cd ../ && make re && cd ./test_philos_jaka


# CLEAR THE FILE FROM PREVIOUS OUTPUT
echo "" > output_lastlines 
echo "" > output_error


OK="${GRN} OK ${RES}"
KO="${RED} KO ${RES}"


check_last_lines() {
	local i="$1"
	LASTLINE=$( tail -n 2 output )
	echo "TEST $i" >> output_lastlines
	echo "$LASTLINE" >> output_lastlines
	if grep -q " is" <<< $LASTLINE || \
		grep -q " has" <<< $LASTLINE; then
		echo "" >> output_lastlines
		return 0
	fi
	return 1
}


if [[ "$OSTYPE" == "linux-gnu"* ]]; then
	TIMEOUT="timeout"
elif [[ "$OSTYPE" == "darwin"* ]]; then
	TIMEOUT="gtimeout"
	echo Mac
fi


#################################################################
### SHOULD DIE ##################################################

ARGS=(	
		"1 800 200 200"\
		"2 200 200 200"\
		"2 310 200 100"\
		"4 310 200 100"\
		"4 200 205 200")
ARRLEN=${#ARGS[@]}

j=0
while [ $j -lt $CYCLES ]
	do
	echo -e "${CYN}\n--------------------------------------------------------------------- ${RES}"
	echo -e "${CYN}SHOULD DIE: --------------------------------------------------------- ${RES}\n"
	echo -e "${CYN}   CYCLE $j ${RES}"
	i=0
	while [ $i -lt $ARRLEN ]
		do
			echo -e "\n\n\n--- SHOULD DIE, CYCLE $j, TEST $i ---" >> output_error
			../philo ${ARGS[$i]} 2>> output_error 1> output
			RET=$(grep -c 'died' output)
			if [ $RET = 1 ]; then
				echo -e "   ${ARGS[$i]}     $GRN died  OK $RES \n"
			fi
			((i++))
	done
	((j++))
done


######################################################################
### SHOULD NOT DIE  ##################################################

ARGS=(  
	"  2 710  300 100"\
	"  4 410  200 200"\
	#"  5 800  200 200"\
	"  5 1000 200 200"\
	"  5 600  150 150"\
	#"  7 800  200 100"\
	#"  7 800  100 300"\
	"100 800  200 200"\
	"105 800  200 200"\
	"200 800  200 200"
	)
ARRLEN=${#ARGS[@]}

j=0
while [ $j -lt $CYCLES ]
do
	echo -e "\n${CYN}---------------------------------------------------------------------------- ${RES}"
	echo -e "${CYN}SHOULD NOT DIE, runtime $TIME secs --------------------------------------------- ${RES}\n"
	echo -e "${CYN}   CYCLE $j ${RES}"
	echo "CYCLE $j" >> output_lastlines
	i=0
	while [ $i -lt $ARRLEN ]
	do
		echo -e -n "   Test $i:	${ARGS[$i]}"
		echo -e "\n\n\n--- SHOULD NOT DIE, CYCLE $j, TEST $i ---" >> output_error
		$TIMEOUT $TIME ../philo	${ARGS[$i]} 2>> output_error 1> output ; sleep 1
		python3 output_check_order.py
		ORDER=$?
		RET=$(grep -c 'died' output)

		if ! [ -s output ]; then
			RET=-1
		fi


		check_last_lines $i
		CHECK=$?
		if [ $RET == 0 ] && [ $ORDER == 0 ]; then
			if [ $CHECK == 0 ]; then
				echo -e " .... $OK \n" ; sleep 1
			fi
		elif [ $RET == 1 ] && [ $ORDER == 0 ]; then
 			echo -e "$RED .... died too soon (maybe due to fsanitize) $RES \n" ; sleep 1
		elif [ $RET == 1 ] && [ $ORDER == 1 ]; then
 			echo -e "$RED .... died too soon (maybe due to fsanitize) $RES \n" ; sleep 1
		elif [ $RET == -1 ] ; then
			echo -e "$RED .... empty output file (maybe runtime was too short)$RES\n"
		fi
		RET=$(grep -c 'data race' output_error)
		if [ $RET -gt 0 ]; then
			echo -e "$RED $RET .... Data Race found!\n $RES"
		fi
		((i++))
	done
	((j++))
 done



##################################################################################
###  SHOULD STOP AFTER x MEALS  ##################################################

j=0
while [ $j -lt $CYCLES ]
do
	echo -e "\n${CYN}--------------------------------------------------------------------- $RES"
	echo -e   "${CYN}SHOULD STOP AFTER $MEALS MEALS ------------------------------------------- $RES\n"
	echo -e "${CYN}   CYCLE $j $RES"	
	i=0
	while [ $i -lt $ARRLEN ]
	do
		echo -e -n "   Test $i:  ${ARGS[$i]} $MEALS"     ; sleep 1
		echo -e "\n\n\n--- SHOULD STOP AFTER $MEALS MEALS, CYCLE $j, TEST $i ---" >> output_error
 		../philo	${ARGS[$i]} $MEALS 2>> output_error 1> output ; sleep 1
		RET=$(grep -c 'died' output)
		if ! [ -s output ]; then
			RET=-1
		fi
		if [ $RET == 1 ]; then
 			echo -e "$RED .... died too soon (maybe due to fsanitize) $RES\n" ; sleep 1
		elif [ $RET == -1 ] ; then
			echo -e "$RED .... empty output file $RES\n"
		fi
		RET=$(grep -c 'eating' output)
		MAX_EXPECTED_MEALS=$( echo ${ARGS[$i]}  | head -n1 | awk '{print $1;}' )
		MAX_EXPECTED_MEALS=$(($MAX_EXPECTED_MEALS * $MEALS))

		if [ $RET == $MAX_EXPECTED_MEALS ]; then
				echo -e "$GRN .... $MEALS meals $OK " ; sleep 1
		else
			echo -e "$RED        .... incorrect nr of eaten meals $RES" ; sleep 1
		fi
		RET=$(grep -c 'data race' output_error)
		if [ $RET -gt 0 ]; then
			echo -e "$RED         .... Data Race found $RET x $RES"
		fi
		echo ""
		((i++))
	done
	((j++))
done

exit 0
